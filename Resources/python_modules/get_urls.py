# -*- coding: utf-8 -*-
"""get_urls.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bp0R4q5ZA_8kaIpJGXrimt3JCBJeF6dH

The code on this page is for getting the number of reports associated with a drug and gathter the urls to download the reports later.
"""

# Import depedencies
import requests
import pandas as pd
import json
from requests.structures import CaseInsensitiveDict
import time
import ssl
ssl._create_default_https_context = ssl._create_unverified_context

# Define parameters
parameters = {'limit': 1000}
headers = CaseInsensitiveDict()
headers["Accept"] = "application/json"

# Define parameters
parameters = {'limit': 1000}
headers = CaseInsensitiveDict()
headers["Accept"] = "application/json"

# Find the number of reports
def get_nb_reports(base_url):
    nb_reports = 0
    try:
        intial_req = requests.get(base_url).json()
        nb_reports = intial_req['meta']['results']['total']
    except:
        return None
    return nb_reports

def reports_url(base_url, num_reports,dict_url):
    url_1000 = f'{base_url}&limit=1000'
    dict_url['url_1000'] = url_1000
    parameters = {'limit': 1000}
    results = []
    headers = CaseInsensitiveDict()
    headers["Accept"] = "application/json"
    total_retrieved = 0
    
    try:
        response = requests.get(base_url, params=parameters, headers=headers)
        raw_data = response.json()["results"]  
        next_url = response.links['next']['url']
        reports_retrieved = len(raw_data)
        total_retrieved = total_retrieved + reports_retrieved
        name_url = f"url_{1000 + total_retrieved}"
        dict_url[name_url] = next_url
        print(f"Qty of reports received : {total_retrieved} Qty of reports left {num_reports - total_retrieved}....")
        
        while next_url:  
            response = requests.get(next_url, headers=headers)
            raw_data = response.json()["results"]  
            if "link" in response.headers:
                next_url = response.links['next']['url']
            else:
                next_url = ""
            reports_retrieved = len(raw_data)
            total_retrieved = total_retrieved + reports_retrieved
            name_url = f"url_{1000 + total_retrieved}"
            dict_url[name_url] = next_url
            print(f"Qty of reports received : {total_retrieved} Qty of reports left {num_reports - total_retrieved}....")
        
            time.sleep(4)
        return dict_url      
    except Exception as err:
        print(type(err))
        print(err)